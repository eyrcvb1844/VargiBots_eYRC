<launch>

    <!-- Recording Bag File for Submission -->
    <arg name="record" default="false"/>
    <arg name="rec_name" default="task5.bag"/>

    <group if="$(arg record)">
        <node name="rosbag_record_pick" pkg="rosbag" type="record"
       args="record -O $(find pkg_task5)/bag_files/$(arg rec_name) --chunksize=10 /eyrc/vb/ur5_1/vacuum_gripper/logical_camera/ur5_1 /eyrc/vb/ur5_2/vacuum_gripper/logical_camera/ur5_2" output="screen"/>
    </group>



    <rosparam file ="$(find pkg_ros_iot_bridge)/config/config_pyiot.yaml"/>
    <rosparam file ="$(find pkg_vb_sim)/config/config_online_order.yaml"/>
    <node name= "node_iot_ros_bridge_action_server" pkg= "pkg_ros_iot_bridge" type="node_action_server_ros_iot_bridge.py" output="screen"/>



    <!-- Launch Task-5 Simulation Environment in Gazebo -->
    <include file="$(find pkg_vb_sim)/launch/task5_simulation.launch" />

    
    <group ns="ur5_1">

      <include file="$(find pkg_moveit_ur5_1_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="true"/>
      </include>

      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/joint_states]</rosparam>
      </node>

      <include file="$(find pkg_moveit_ur5_1_config)/launch/move_group.launch">
        <arg name="publish_monitored_planning_scene" value="true"/>
      </include>
      <include file="$(find pkg_moveit_ur5_1_config)/launch/moveit_rviz_robot1.launch">
        <arg name="config" value="true"/>
      </include>

      <arg name="scene_file_1" default="$(find pkg_task5)/config/rviz/conveyor1.scene"/>
      <node name = "moveit_publish_scene_from_text_c1" pkg= "moveit_ros_planning" type = "moveit_publish_scene_from_text" args= "$(arg scene_file_1)"/>

      
      <!-- <arg name="scene_file_2" default="$(find pkg_task5)/config/rviz/shelf.scene"/>
      <node name = "moveit_publish_scene_from_text_sh" pkg= "moveit_ros_planning" type = "moveit_publish_scene_from_text" args= "$(arg scene_file_2)"/>  -->

    </group>




    <group ns="ur5_2">

      <include file="$(find pkg_moveit_ur5_2_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="true"/>
      </include>

      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/joint_states]</rosparam>
      </node>

      <include file="$(find pkg_moveit_ur5_2_config)/launch/move_group.launch">
        <arg name="publish_monitored_planning_scene" value="true"/>
      </include>
      <include file="$(find pkg_moveit_ur5_2_config)/launch/moveit_rviz_robot2.launch">
        <arg name="config" value="true"/>
      </include>

      <arg name="red_bin" default="$(find pkg_task5)/config/rviz/red_bin.scene"/>
      <node name = "moveit_publish_scene_from_text_r" pkg= "moveit_ros_planning" type = "moveit_publish_scene_from_text" args= "$(arg red_bin)"/>
      <arg name="green_bin" default="$(find pkg_task5)/config/rviz/green_bin.scene"/>
      <node name = "moveit_publish_scene_from_text_g" pkg= "moveit_ros_planning" type = "moveit_publish_scene_from_text" args= "$(arg green_bin)"/>
      <arg name="blue_bin" default="$(find pkg_task5)/config/rviz/blue_bin.scene"/>
      <node name = "moveit_publish_scene_from_text_b" pkg= "moveit_ros_planning" type = "moveit_publish_scene_from_text" args= "$(arg blue_bin)"/>

    </group>

    
    <node name= "ur5_action_client" pkg= "pkg_task5" type="ur5_action_client.py" output="screen"/>
    
    <!-- This node is for picking up the boxes from the conveyor and dropping them in their respective bins with the UR5_2 arm.-->
    <!-- It gets information about the boxes using camera_1 by decoding their qr codes.-->
    <!-- It subscribes check_box topic to know when the box comes under the gripper-->
    <node name= "ur5_1_controller" pkg= "pkg_task5" type="ur5_1_controller.py" output="screen"/>

    <!-- This node controls the UR5_1 which takes out all the boxes from the shelf serially and drops it on the conveyor-->
    <!-- <node name= "ur5_2_controller" pkg= "pkg_task5" type="ur5_2_controller.py" output="screen"/> -->

    <!-- This node is for controlling the conveyor. -->
    <!-- It stops the conveyor when the box is at the middle of the logical camera's range (when y is nearly equal to 0).-->
    <!-- It moves the conveyor when there is no box on the logical camera's range. It takes coordinates from logical camera. -->
    <!-- When a box stops it publishes a message of box no. and True through topic /check_box-->
    <node name= "convey" pkg= "pkg_task5" type="convey.py"/>
</launch>